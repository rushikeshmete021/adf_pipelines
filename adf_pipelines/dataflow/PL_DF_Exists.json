{
	"name": "PL_DF_Exists",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_DF_Source",
						"type": "DatasetReference"
					},
					"name": "empsource"
				},
				{
					"dataset": {
						"referenceName": "DS_DF_DSource",
						"type": "DatasetReference"
					},
					"name": "depsource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_Sink_exist",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "exists1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          employee_id as string,",
				"          first_name as string,",
				"          last_name as string,",
				"          department_name as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> empsource",
				"source(output(",
				"          employee_id as string,",
				"          first_name as string,",
				"          salary as string,",
				"          department_name as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> depsource",
				"empsource, depsource exists(empsource@employee_id == depsource@employee_id,",
				"     negate:false,",
				"     broadcast: 'auto')~> exists1",
				"exists1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Invoice_ID as string,",
				"          Branch as string,",
				"          City as string,",
				"          {Customer type} as string,",
				"          Gender as string,",
				"          Product_line as string,",
				"          Unit_price as string,",
				"          Quantity as string,",
				"          {Tax 5%} as string,",
				"          Total as string,",
				"          Date as string,",
				"          Time as string,",
				"          Payment as string,",
				"          cogs as string,",
				"          gross_margin_percentage as string,",
				"          gross_income as string,",
				"          Rating as string",
				"     ),",
				"     partitionFileNames:['EmployeeUE.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}